"use strict";
/**
 * This library provides means for representing values that may or may not
 * exist. This can come handy for representing optional arguments,
 * error handling, and records with optional fields.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Turns arbitrary value into maybe value.
 * @param value arbitrary value
 */
exports.just = (value) => value;
/**
 * Just provides an alias to `null`.
 */
exports.nothing = null;
/**
 * Provide a `fallback` value, turning an optional value into a normal value.
 *
 * ```ts
 * Maybe.toValue(5, Maybe.just(9)) // => Maybe.just(9)
 * Maybe.toValue(6, Maybe.nothing) // => Maybe.just(6)
 * ```
 * @param fallback Fallback value
 * @param maybe Optional value
 */
exports.toValue = (fallback, maybe) => maybe == null ? fallback : maybe;
/**
 * Transform a Maybe value with a given function:
 *
 * ```ts
 * Maybe.map(Math.sqrt, Maybe.just(9)) // => Maybe.just(3)
 * Maybe.map(Math.sqrt, Maybe.nothing) // => Maybe.nothing
 * ```
 * @param f Function that maps underlayng value.
 * @param maybe Maybe value to be transformed.
 */
exports.map = (f, maybe) => maybe == null ? null : f(maybe);
/**
 * Utility to chain together two computations that may fail (return Nothing).
 *
 * ```ts
 * const makeGreeting = (name:string):string =>
 *  `Hello ${name}!`
 *
 * const greet = (name:Maybe<string>):Maybe<string> =>
 *  Maybe.chain(makeGreeting, name)
 *
 * greet(Maybe.nothing) // => Maybe.nothing
 * greet(Maybe.just('world')) // => Maybe.just('Hello world!')
 * ```
 *
 * @param then Function that performs second computation from the a result of
 * the first one (if it was successful - returned Just).
 * @param maybe Maybe value, representing result of first computation.
 */
exports.chain = (then, maybe) => maybe == null ? null : then(maybe);
/**
 * Returns `Nothing` if the left Maybe is `Nothing`, otherwise returns the
 * right Maybe.
 *
 * ```ts
 * Maybe.and(Maybe.just(2), Maybe.nothing) // => Maybe.nothing
 * Maybe.and(Maybe.nothing, Maybe.just('foo')) // => Maybe.nothing
 * Maybe.and(Maybe.just(2), Maybe.just('foo')) // => Maybe.just('foo')
 * Maybe.and(Maybe.nothing, Maybe.nothing) // => Maybe.nothing
 * ```
 */
exports.and = (left, right) => left == null ? null : right;
/**
 * Returns the left Maybe if it is a Just value, otherwise returns right Maybe.
 *
 * ```js
 * Maybe.or(Maybe.just(2), Maybe.nothing) // => Maybe.just(2)
 * Maybe.or(Maybe.nothing, Maybe.just('foo')) // => Maybe.just('foo')
 * Maybe.or(Maybe.just(2), Maybe.just(100)) // => Maybe.just(2)
 * Maybe.or(Maybe.nothing, Maybe.nothing) // => Maybe.nothing
 * ```
 */
exports.or = (left, right) => left == null ? right : left;
/**
 * Predicate that refines given Maybe. If returns `true` given `Maybe` is
 * refined to `Just`, otherwise refined to `Nothing`.
 *
 * ```ts
 * const name:Maybe<string> = Maybe.nothing
 * if (isJust(name)) {
 *   console.log(name.toLowerCase())
 * }
 * ```
 */
exports.isJust = (maybe) => maybe != null;
/**
 * Predicate that refines given Maybe. If returns `true` given `Maybe` is
 * refined to `Nothing`, otherwise refined to `Just`.
 *
 * ```ts
 * const name:Maybe<string> = Maybe.nothing
 * if (!isNothing(name)) {
 *   console.log(name.toLowerCase())
 * }
 * ```
 */
exports.isNothing = (maybe) => maybe == null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWF5YmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcmMvTWF5YmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7O0FBeUJIOzs7R0FHRztBQUNVLFFBQUEsSUFBSSxHQUFHLENBQUssS0FBTyxLQUM5QixLQUFLLENBQUE7QUFFUDs7R0FFRztBQUNVLFFBQUEsT0FBTyxHQUFjLElBQUksQ0FBQTtBQUV0Qzs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLE9BQU8sR0FBRyxDQUFLLFFBQVUsRUFBRSxLQUFjLEtBQ3BELEtBQUssSUFBSSxJQUFJLEdBQUcsUUFBUSxHQUFHLEtBQUssQ0FBQTtBQUVsQzs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLEdBQUcsR0FBRyxDQUFRLENBQWdCLEVBQUUsS0FBYyxLQUN6RCxLQUFLLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7QUFFakM7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ1UsUUFBQSxLQUFLLEdBQUcsQ0FBUSxJQUEwQixFQUFFLEtBQWMsS0FDckUsS0FBSyxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBR3BDOzs7Ozs7Ozs7O0dBVUc7QUFDVSxRQUFBLEdBQUcsR0FBRyxDQUFRLElBQWEsRUFBRSxLQUFjLEtBQ3RELElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQTtBQUU3Qjs7Ozs7Ozs7O0dBU0c7QUFDVSxRQUFBLEVBQUUsR0FBRyxDQUFLLElBQWEsRUFBRSxLQUFjLEtBQ2xELElBQUksSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQTtBQUU3Qjs7Ozs7Ozs7OztHQVVHO0FBQ1UsUUFBQSxNQUFNLEdBQUcsQ0FBSyxLQUFjLEtBQ3ZDLEtBQUssSUFBSSxJQUFJLENBQUE7QUFFZjs7Ozs7Ozs7OztHQVVHO0FBQ1UsUUFBQSxTQUFTLEdBQUcsQ0FBSyxLQUFjLEtBQzFDLEtBQUssSUFBSSxJQUFJLENBQUEifQ==